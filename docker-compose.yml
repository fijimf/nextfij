version: "3.8"

services:
  nginx:
    image: nginx:1.25-alpine
    depends_on:
      uberui:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fijnet
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "service.name=nginx-proxy"
      - "service.description=Nginx reverse proxy with SSL"

  certbot:
    image: certbot/certbot:latest
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - web-root:/var/www/html
    depends_on:
      - nginx
    networks:
      - fijnet
    command: certonly --webroot --webroot-path=/var/www/html --email ${LETSENCRYPT_EMAIL} --agree-tos --no-eff-email --staging -d ${DOMAIN_NAME}
    labels:
      - "service.name=certbot"
      - "service.description=Let's Encrypt certificate manager"

  uberui:
    image: nextfij:latest
    depends_on:
      deepfij:
        condition: service_healthy
    expose:
      - "3000"
    networks:
      - fijnet
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "service.name=nextfij-ui"
      - "service.description=Next.js frontend application"

  deepfij:
    image: aifij:latest
    hostname: fijapi
    depends_on:
      db:
        condition: service_healthy
      deepfij-stats:
        condition: service_healthy
    ports:
      - "${API_PORT:-8073}:8080"
    networks:
      - fijnet
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILE:-local}
      - JAVA_OPTS=-Dapp.jwt.secret=${JWT_SECRET} -Dadmin.password=${ADMIN_PASSWORD}
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "service.name=deepfij-api"
      - "service.description=Spring Boot backend API"

  deepfij-stats:
    image: pystats:latest
    hostname: fijstats
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-deepfij}:${DB_PASSWORD}@db:5432/${DB_NAME:-deepfij_db}
    depends_on:
      db:
        condition: service_healthy
    expose:
      - "8000"
    networks:
      - fijnet
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "service.name=deepfij-stats"
      - "service.description=Python statistics service"

  db:
    image: postgres:15.1-alpine
    restart: unless-stopped
    networks:
      - fijnet
    environment:
      - POSTGRES_DB=${DB_NAME:-deepfij_db}
      - POSTGRES_USER=${DB_USER:-deepfij}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-deepfij} -d ${DB_NAME:-deepfij_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - "service.name=postgres-db"
      - "service.description=PostgreSQL database"

networks:
  fijnet:
    driver: bridge

volumes:
  pgdata:
  certbot-etc:
  certbot-var:
  web-root: